name: Docker

on: [workflow_dispatch, push]

env:
  IMAGE_NAME: monero
  PLATFORMS: amd64 arm64/v8 arm/v7

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: amd64
          - platform: arm64/v8
          - platform: arm/v7
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Install Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Builder
        id: build
        run: |
          # Get the arch for this build
          ARCH=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          docker buildx build \
            --platform linux/${{ matrix.platform }} \
            --build-arg BUILD_THREADS=3 \
            --cache-to type=local,dest=${IMAGE_NAME}-${VERSION}-${ARCH} \
            .

          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=arch::${ARCH}"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}-${{ steps.build.outputs.version }}-${{ steps.build.outputs.arch }}
          path: ${{ env.IMAGE_NAME }}-${{ steps.build.outputs.version }}-${{ steps.build.outputs.arch }}
          if-no-files-found: error
          retention-days: 1
  package:
    name: Package
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Install Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Package and push Runner
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          for arch in $PLATFORMS; do
            platforms="${platforms} --platform linux/${arch}"
            cache="${cache} --cache-from type=local,src=./$IMAGE_NAME-$VERSION-$(echo $arch | sed 's/\//-/g')"
          done

          quay_user="$(echo ${{ secrets.QUAY_USERNAME }} | cut -f1 -d'+')"

          build="docker buildx build ${platforms} \
            --tag ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$VERSION \
            --tag quay.io/${quay_user}/$IMAGE_NAME:$VERSION \
            --tag docker.io/${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$VERSION \
            --build-arg BUILD_THREADS=3 \
            --label org.opencontainers.image.source=https://github.com/${{ github.repository }} \
            $cache --push ."

          echo "$build"
          $build
